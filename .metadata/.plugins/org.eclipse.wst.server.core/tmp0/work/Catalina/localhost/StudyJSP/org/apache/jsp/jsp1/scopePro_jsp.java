/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-08-13 02:19:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scopePro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1>WebContent/jsp1/scopePro.jsp</h1>\n");

//request에 저장된 id파라미터 가져오기 변수 저장
String id = request.getParameter("id");
String pass = request.getParameter("pass");
//내장객체생성하고 page Context request session application
//영역(내장객체 유지영역) 		내장(영역)객체				유효범위
//page										pageContext				해당페이지만 정보유지
//request									request						클라이언트에서 요청정보받았으면 정보유지
//session									session						접속정보유지(페이지 상관 없이 접속만 되어 있으면 유지)
//application 							application					웹애플리케이션이 실행(서버 start)되는 동안 유지

//내장객체 값 저장 내장객체.setAttribute(이름, 값)
// 			  가져오기 내장객체.getAttribute(이름)
//			  하나삭제 내장객체.removeAttribute(이름)
pageContext.setAttribute("page", "pageContext Value");
request.setAttribute("req","request Value");
session.setAttribute("ses", "session Value");
application.setAttribute("app", "application Value");

      out.write("\n");
      out.write("아이디 : ");
      out.print("id" );
      out.write("<br>\n");
      out.write("비밀번호 : ");
      out.print("pass" );
      out.write("<br>\n");
      out.write("pageContext 값 : ");
      out.print(pageContext.getAttribute("page") );
      out.write("<br>\n");
      out.write("request 값 : ");
      out.print(request.getAttribute("req") );
      out.write("<br>\n");
      out.write("session 값 : ");
      out.print(session.getAttribute("ses") );
      out.write("<br>\n");
      out.write("application 값 : ");
      out.print(application.getAttribute("app") );
      out.write("<br>\n");
      out.write("<a href=\"scopeProPro.jsp?id=");
      out.print(id);
      out.write("&pass=");
      out.print(pass);
      out.write("\">scopeProPro.jsp 이동</a>\n");
      out.write("\n");
      out.write("<script type = \"text/javascript\">\n");
      out.write("// \talert(\"scopeProPro.jsp로 이동\");\n");
      out.write("\n");
      out.write("</script>\n");

//  		response.sendRedirect("scopeProPro.jsp?id="+id+"&pass="+pass);  //<<- jsp

      out.write('\n');

//액션태그 : jsp문법, jsp명령을 태그처럼 사용할 수 있게 만든 문법
//					forward, include, useBean, setAttribute
//foward 액션태그 : 현페이지 request모든 정보를 들고 다음 페이지로 이동
//							 : 주소줄에서는 현 페이지주소 화면에는 다음페이지 실행화면이 보임

      out.write('\n');
      if (true) {
        _jspx_page_context.forward("scopeProPro.jsp");
        return;
      }
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
